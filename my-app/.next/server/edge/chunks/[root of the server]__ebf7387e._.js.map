{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\n\r\nexport async function middleware(req) {\r\n  console.log(\"Middleware triggered for:\", req.nextUrl.pathname);\r\n  const { pathname } = req.nextUrl;\r\n\r\n  const userToken = req.cookies.get(\"usertoken\")?.value;\r\n  const adminToken = req.cookies.get(\"admintoken\")?.value;\r\n\r\n  // Protect /signup/adminlogin/* routes\r\n  if (pathname.startsWith(\"/signup/adminlogin\")) {\r\n    if (userToken) {\r\n      console.log(\"User token present for admin route\");\r\n      return NextResponse.redirect(new URL(\"/signup/loginasadmin\", req.url));\r\n    }\r\n    if (!adminToken) {\r\n      console.log(\" No admin token\");\r\n      return NextResponse.redirect(new URL(\"/signup/loginasadmin\", req.url));\r\n    }\r\n    try {\r\n      // Call backend to verify admin token\r\n      const response = await fetch(\"http://localhost:5000/api/verify-admin-token\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ token: adminToken }),\r\n        credentials: \"include\",\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok || data.role !== \"admin\") {\r\n        console.log(\"Invalid admin token or role\");\r\n        return NextResponse.redirect(new URL(\"/signup/loginasadmin\", req.url));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Admin token verification error:\", err.message);\r\n      return NextResponse.redirect(new URL(\"/signup/loginasadmin\", req.url));\r\n    }\r\n  }\r\n\r\n  // Protect /signup/userlogin/* routes\r\n  if (pathname.startsWith(\"/signup/userlogin\")) {\r\n    if (adminToken) {\r\n      console.log(\"Admin token present for user route\");\r\n      return NextResponse.redirect(new URL(\"/signup/loginasuser\", req.url));\r\n    }\r\n    if (!userToken) {\r\n      console.log(\"No user token\");\r\n      return NextResponse.redirect(new URL(\"/signup/loginasuser\", req.url));\r\n    }\r\n    try {\r\n      // Call backend to verify user token\r\n      const response = await fetch(\"http://localhost:5000/api/verify-user-token\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ token: userToken }),\r\n        credentials: \"include\",\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok || data.role === \"admin\") {\r\n        console.log(\"Invalid user token or admin role\");\r\n        return NextResponse.redirect(new URL(\"/signup/loginasuser\", req.url));\r\n      }\r\n    } catch (err) {\r\n      console.error(\"User token verification error:\", err.message);\r\n      return NextResponse.redirect(new URL(\"/signup/loginasuser\", req.url));\r\n    }\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/signup/adminlogin/:path*\", \"/signup/userlogin/:path*\"],\r\n};"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,eAAe,WAAW,GAAG;IAClC,QAAQ,GAAG,CAAC,6BAA6B,IAAI,OAAO,CAAC,QAAQ;IAC7D,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,MAAM,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;IAChD,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe;IAElD,sCAAsC;IACtC,IAAI,SAAS,UAAU,CAAC,uBAAuB;QAC7C,IAAI,WAAW;YACb,QAAQ,GAAG,CAAC;YACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,wBAAwB,IAAI,GAAG;QACtE;QACA,IAAI,CAAC,YAAY;YACf,QAAQ,GAAG,CAAC;YACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,wBAAwB,IAAI,GAAG;QACtE;QACA,IAAI;YACF,qCAAqC;YACrC,MAAM,WAAW,MAAM,MAAM,gDAAgD;gBAC3E,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,OAAO;gBAAW;gBACzC,aAAa;YACf;YACA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,IAAI,CAAC,SAAS,EAAE,IAAI,KAAK,IAAI,KAAK,SAAS;gBACzC,QAAQ,GAAG,CAAC;gBACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,wBAAwB,IAAI,GAAG;YACtE;QACF,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,mCAAmC,IAAI,OAAO;YAC5D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,wBAAwB,IAAI,GAAG;QACtE;IACF;IAEA,qCAAqC;IACrC,IAAI,SAAS,UAAU,CAAC,sBAAsB;QAC5C,IAAI,YAAY;YACd,QAAQ,GAAG,CAAC;YACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,uBAAuB,IAAI,GAAG;QACrE;QACA,IAAI,CAAC,WAAW;YACd,QAAQ,GAAG,CAAC;YACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,uBAAuB,IAAI,GAAG;QACrE;QACA,IAAI;YACF,oCAAoC;YACpC,MAAM,WAAW,MAAM,MAAM,+CAA+C;gBAC1E,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;oBAAE,OAAO;gBAAU;gBACxC,aAAa;YACf;YACA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,IAAI,CAAC,SAAS,EAAE,IAAI,KAAK,IAAI,KAAK,SAAS;gBACzC,QAAQ,GAAG,CAAC;gBACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,uBAAuB,IAAI,GAAG;YACrE;QACF,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,kCAAkC,IAAI,OAAO;YAC3D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,uBAAuB,IAAI,GAAG;QACrE;IACF;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;QAA6B;KAA2B;AACpE"}}]
}